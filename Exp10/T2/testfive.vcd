$date
	Mon Jan 28 22:42:28 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test_five_bit_adder $end
$var wire 5 ! s [4:0] $end
$var wire 1 " cout $end
$var wire 5 # c [4:0] $end
$var reg 5 $ a [4:0] $end
$var reg 5 % b [4:0] $end
$scope module DUT $end
$var wire 5 & a [4:0] $end
$var wire 5 ' b [4:0] $end
$var wire 5 ( s [4:0] $end
$var wire 1 " cout $end
$var wire 5 ) c [4:0] $end
$scope module b1 $end
$var wire 1 * a $end
$var wire 1 + b $end
$var wire 1 , carry $end
$var wire 1 - sum $end
$upscope $end
$scope module b2 $end
$var wire 1 . a $end
$var wire 1 / b $end
$var wire 1 0 carryin $end
$var wire 1 1 carryout $end
$var wire 1 2 sum $end
$var wire 1 3 w1 $end
$var wire 1 4 w2 $end
$var wire 1 5 w3 $end
$upscope $end
$scope module b3 $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 8 carryin $end
$var wire 1 9 carryout $end
$var wire 1 : sum $end
$var wire 1 ; w1 $end
$var wire 1 < w2 $end
$var wire 1 = w3 $end
$upscope $end
$scope module b4 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 @ carryin $end
$var wire 1 A carryout $end
$var wire 1 B sum $end
$var wire 1 C w1 $end
$var wire 1 D w2 $end
$var wire 1 E w3 $end
$upscope $end
$scope module b5 $end
$var wire 1 F a $end
$var wire 1 G b $end
$var wire 1 H carryin $end
$var wire 1 " carryout $end
$var wire 1 I sum $end
$var wire 1 J w1 $end
$var wire 1 K w2 $end
$var wire 1 L w3 $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
x+
x*
bxz )
bx (
bx '
bx &
bx %
bx $
bxz #
x"
bx !
$end
#10
0:
0B
08
0@
1I
12
01
09
1H
0"
10
05
0=
0E
1A
0L
b10010 !
b10010 (
0-
b1001z #
b1001z )
1,
03
04
0;
0<
0C
1D
0J
0K
1+
0/
07
1?
0G
1*
0.
06
1>
0F
b1001 %
b1001 '
b1001 $
b1001 &
#20
